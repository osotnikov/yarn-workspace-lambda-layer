"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InfrastructureStack = void 0;
const apigw = require("aws-cdk-lib/aws-apigateway");
const cdk = require("aws-cdk-lib");
const aws_lambda_1 = require("aws-cdk-lib/aws-lambda");
const nodeLambda = require("aws-cdk-lib/aws-lambda-nodejs");
const lambda = require("aws-cdk-lib/aws-lambda");
const path = require("path");
const dynamodb = require("aws-cdk-lib/aws-dynamodb");
class InfrastructureStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const dependenciesLayer = new aws_lambda_1.LayerVersion(this, "DependenciesLayer", {
            code: aws_lambda_1.Code.fromAsset("../lambda-layer"),
            compatibleRuntimes: [aws_lambda_1.Runtime.NODEJS_20_X]
        });
        const lambdaAppDir = path.resolve(__dirname, '../../');
        const aLambda = new nodeLambda.NodejsFunction(this, 'ALambda', {
            functionName: `aLambda`,
            runtime: lambda.Runtime.NODEJS_20_X,
            layers: [dependenciesLayer],
            depsLockFilePath: path.join(lambdaAppDir, 'yarn.lock'),
            entry: path.join(lambdaAppDir, 'lambda-a/bin/a.js'),
            memorySize: 1024,
            handler: 'handler',
            environment: {
                LOG_LEVEL: 'DEBUG',
            },
        });
        const bLambda = new nodeLambda.NodejsFunction(this, 'BLambda', {
            functionName: `bLambda`,
            runtime: lambda.Runtime.NODEJS_20_X,
            layers: [dependenciesLayer],
            depsLockFilePath: path.join(lambdaAppDir, 'yarn.lock'),
            entry: path.join(lambdaAppDir, 'lambda-b/bin/b.js'),
            memorySize: 1024,
            handler: 'handler',
            environment: {
                LOG_LEVEL: 'DEBUG',
                COGNITO_CLIENT_ID: ''
            },
        });
        // create the api to allow us to create a new product
        const api = new apigw.RestApi(this, 'Api', {
            description: `a-b gw`,
            restApiName: `apigw`,
            deploy: true,
            deployOptions: {
                stageName: 'api',
                dataTraceEnabled: true,
                loggingLevel: apigw.MethodLoggingLevel.INFO
            },
        });
        const apiRoot = api.root.addResource('v1');
        const aResource = apiRoot.addResource('a');
        aResource.addMethod('POST', new apigw.LambdaIntegration(aLambda, {
            proxy: true,
        }));
        const bResource = apiRoot.addResource('b');
        bResource.addMethod('POST', new apigw.LambdaIntegration(bLambda, {
            proxy: true,
        }));
        // dynamodb
        new dynamodb.Table(this, 'Table', {
            partitionKey: { name: 'username', type: dynamodb.AttributeType.STRING },
            billingMode: dynamodb.BillingMode.PAY_PER_REQUEST,
        });
    }
}
exports.InfrastructureStack = InfrastructureStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5mcmFzdHJ1Y3R1cmUtc3RhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmZyYXN0cnVjdHVyZS1zdGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxvREFBb0Q7QUFDcEQsbUNBQW1DO0FBRW5DLHVEQUFtRTtBQUNuRSw0REFBNEQ7QUFDNUQsaURBQWlEO0FBQ2pELDZCQUE2QjtBQUM3QixxREFBcUQ7QUFFckQsTUFBYSxtQkFBb0IsU0FBUSxHQUFHLENBQUMsS0FBSztJQUM5QyxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQXNCO1FBQzVELEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRXhCLE1BQU0saUJBQWlCLEdBQUcsSUFBSSx5QkFBWSxDQUFDLElBQUksRUFBRSxtQkFBbUIsRUFBRTtZQUNsRSxJQUFJLEVBQUUsaUJBQUksQ0FBQyxTQUFTLENBQUMsaUJBQWlCLENBQUM7WUFDdkMsa0JBQWtCLEVBQUUsQ0FBQyxvQkFBTyxDQUFDLFdBQVcsQ0FBQztTQUM1QyxDQUFDLENBQUM7UUFFSCxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQTtRQUN0RCxNQUFNLE9BQU8sR0FDVCxJQUFJLFVBQVUsQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRTtZQUMzQyxZQUFZLEVBQUUsU0FBUztZQUN2QixPQUFPLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXO1lBQ25DLE1BQU0sRUFBRSxDQUFDLGlCQUFpQixDQUFDO1lBQzNCLGdCQUFnQixFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLFdBQVcsQ0FBQztZQUN0RCxLQUFLLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsbUJBQW1CLENBQUM7WUFDbkQsVUFBVSxFQUFFLElBQUk7WUFDaEIsT0FBTyxFQUFFLFNBQVM7WUFDbEIsV0FBVyxFQUFFO2dCQUNULFNBQVMsRUFBRSxPQUFPO2FBQ3JCO1NBQ0osQ0FBQyxDQUFDO1FBRVAsTUFBTSxPQUFPLEdBQ1QsSUFBSSxVQUFVLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxTQUFTLEVBQUU7WUFDM0MsWUFBWSxFQUFFLFNBQVM7WUFDdkIsT0FBTyxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVztZQUNuQyxNQUFNLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQztZQUMzQixnQkFBZ0IsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxXQUFXLENBQUM7WUFDdEQsS0FBSyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLG1CQUFtQixDQUFDO1lBQ25ELFVBQVUsRUFBRSxJQUFJO1lBQ2hCLE9BQU8sRUFBRSxTQUFTO1lBQ2xCLFdBQVcsRUFBRTtnQkFDVCxTQUFTLEVBQUUsT0FBTztnQkFDbEIsaUJBQWlCLEVBQUUsRUFBRTthQUN4QjtTQUNKLENBQUMsQ0FBQztRQUVQLHFEQUFxRDtRQUNyRCxNQUFNLEdBQUcsR0FBa0IsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUU7WUFDdEQsV0FBVyxFQUFFLFFBQVE7WUFDckIsV0FBVyxFQUFFLE9BQU87WUFDcEIsTUFBTSxFQUFFLElBQUk7WUFDWixhQUFhLEVBQUU7Z0JBQ1gsU0FBUyxFQUFFLEtBQUs7Z0JBQ2hCLGdCQUFnQixFQUFFLElBQUk7Z0JBQ3RCLFlBQVksRUFBRSxLQUFLLENBQUMsa0JBQWtCLENBQUMsSUFBSTthQUM5QztTQUNKLENBQUMsQ0FBQztRQUVILE1BQU0sT0FBTyxHQUFtQixHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMzRCxNQUFNLFNBQVMsR0FBbUIsT0FBTyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMzRCxTQUFTLENBQUMsU0FBUyxDQUNmLE1BQU0sRUFDTixJQUFJLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLEVBQUU7WUFDakMsS0FBSyxFQUFFLElBQUk7U0FDZCxDQUFDLENBQ0wsQ0FBQztRQUNGLE1BQU0sU0FBUyxHQUFtQixPQUFPLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzNELFNBQVMsQ0FBQyxTQUFTLENBQ2YsTUFBTSxFQUNOLElBQUksS0FBSyxDQUFDLGlCQUFpQixDQUFDLE9BQU8sRUFBRTtZQUNqQyxLQUFLLEVBQUUsSUFBSTtTQUNkLENBQUMsQ0FDTCxDQUFDO1FBRUYsV0FBVztRQUNYLElBQUksUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFO1lBQzlCLFlBQVksRUFBRSxFQUFDLElBQUksRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLFFBQVEsQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFDO1lBQ3JFLFdBQVcsRUFBRSxRQUFRLENBQUMsV0FBVyxDQUFDLGVBQWU7U0FDcEQsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztDQUNKO0FBekVELGtEQXlFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGFwaWd3IGZyb20gJ2F3cy1jZGstbGliL2F3cy1hcGlnYXRld2F5JztcbmltcG9ydCAqIGFzIGNkayBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQge0NvbnN0cnVjdH0gZnJvbSAnY29uc3RydWN0cyc7XG5pbXBvcnQge0NvZGUsIExheWVyVmVyc2lvbiwgUnVudGltZX0gZnJvbSBcImF3cy1jZGstbGliL2F3cy1sYW1iZGFcIjtcbmltcG9ydCAqIGFzIG5vZGVMYW1iZGEgZnJvbSAnYXdzLWNkay1saWIvYXdzLWxhbWJkYS1ub2RlanMnO1xuaW1wb3J0ICogYXMgbGFtYmRhIGZyb20gJ2F3cy1jZGstbGliL2F3cy1sYW1iZGEnO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tIFwicGF0aFwiO1xuaW1wb3J0ICogYXMgZHluYW1vZGIgZnJvbSAnYXdzLWNkay1saWIvYXdzLWR5bmFtb2RiJztcblxuZXhwb3J0IGNsYXNzIEluZnJhc3RydWN0dXJlU3RhY2sgZXh0ZW5kcyBjZGsuU3RhY2sge1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzPzogY2RrLlN0YWNrUHJvcHMpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkLCBwcm9wcyk7XG5cbiAgICAgICAgY29uc3QgZGVwZW5kZW5jaWVzTGF5ZXIgPSBuZXcgTGF5ZXJWZXJzaW9uKHRoaXMsIFwiRGVwZW5kZW5jaWVzTGF5ZXJcIiwge1xuICAgICAgICAgICAgY29kZTogQ29kZS5mcm9tQXNzZXQoXCIuLi9sYW1iZGEtbGF5ZXJcIiksXG4gICAgICAgICAgICBjb21wYXRpYmxlUnVudGltZXM6IFtSdW50aW1lLk5PREVKU18yMF9YXVxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBsYW1iZGFBcHBEaXIgPSBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnLi4vLi4vJylcbiAgICAgICAgY29uc3QgYUxhbWJkYTogbm9kZUxhbWJkYS5Ob2RlanNGdW5jdGlvbiA9XG4gICAgICAgICAgICBuZXcgbm9kZUxhbWJkYS5Ob2RlanNGdW5jdGlvbih0aGlzLCAnQUxhbWJkYScsIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbk5hbWU6IGBhTGFtYmRhYCxcbiAgICAgICAgICAgICAgICBydW50aW1lOiBsYW1iZGEuUnVudGltZS5OT0RFSlNfMjBfWCxcbiAgICAgICAgICAgICAgICBsYXllcnM6IFtkZXBlbmRlbmNpZXNMYXllcl0sXG4gICAgICAgICAgICAgICAgZGVwc0xvY2tGaWxlUGF0aDogcGF0aC5qb2luKGxhbWJkYUFwcERpciwgJ3lhcm4ubG9jaycpLFxuICAgICAgICAgICAgICAgIGVudHJ5OiBwYXRoLmpvaW4obGFtYmRhQXBwRGlyLCAnbGFtYmRhLWEvYmluL2EuanMnKSxcbiAgICAgICAgICAgICAgICBtZW1vcnlTaXplOiAxMDI0LFxuICAgICAgICAgICAgICAgIGhhbmRsZXI6ICdoYW5kbGVyJyxcbiAgICAgICAgICAgICAgICBlbnZpcm9ubWVudDoge1xuICAgICAgICAgICAgICAgICAgICBMT0dfTEVWRUw6ICdERUJVRycsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IGJMYW1iZGE6IG5vZGVMYW1iZGEuTm9kZWpzRnVuY3Rpb24gPVxuICAgICAgICAgICAgbmV3IG5vZGVMYW1iZGEuTm9kZWpzRnVuY3Rpb24odGhpcywgJ0JMYW1iZGEnLCB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb25OYW1lOiBgYkxhbWJkYWAsXG4gICAgICAgICAgICAgICAgcnVudGltZTogbGFtYmRhLlJ1bnRpbWUuTk9ERUpTXzIwX1gsXG4gICAgICAgICAgICAgICAgbGF5ZXJzOiBbZGVwZW5kZW5jaWVzTGF5ZXJdLFxuICAgICAgICAgICAgICAgIGRlcHNMb2NrRmlsZVBhdGg6IHBhdGguam9pbihsYW1iZGFBcHBEaXIsICd5YXJuLmxvY2snKSxcbiAgICAgICAgICAgICAgICBlbnRyeTogcGF0aC5qb2luKGxhbWJkYUFwcERpciwgJ2xhbWJkYS1iL2Jpbi9iLmpzJyksXG4gICAgICAgICAgICAgICAgbWVtb3J5U2l6ZTogMTAyNCxcbiAgICAgICAgICAgICAgICBoYW5kbGVyOiAnaGFuZGxlcicsXG4gICAgICAgICAgICAgICAgZW52aXJvbm1lbnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgTE9HX0xFVkVMOiAnREVCVUcnLFxuICAgICAgICAgICAgICAgICAgICBDT0dOSVRPX0NMSUVOVF9JRDogJydcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gY3JlYXRlIHRoZSBhcGkgdG8gYWxsb3cgdXMgdG8gY3JlYXRlIGEgbmV3IHByb2R1Y3RcbiAgICAgICAgY29uc3QgYXBpOiBhcGlndy5SZXN0QXBpID0gbmV3IGFwaWd3LlJlc3RBcGkodGhpcywgJ0FwaScsIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBgYS1iIGd3YCxcbiAgICAgICAgICAgIHJlc3RBcGlOYW1lOiBgYXBpZ3dgLFxuICAgICAgICAgICAgZGVwbG95OiB0cnVlLFxuICAgICAgICAgICAgZGVwbG95T3B0aW9uczoge1xuICAgICAgICAgICAgICAgIHN0YWdlTmFtZTogJ2FwaScsXG4gICAgICAgICAgICAgICAgZGF0YVRyYWNlRW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBsb2dnaW5nTGV2ZWw6IGFwaWd3Lk1ldGhvZExvZ2dpbmdMZXZlbC5JTkZPXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBhcGlSb290OiBhcGlndy5SZXNvdXJjZSA9IGFwaS5yb290LmFkZFJlc291cmNlKCd2MScpO1xuICAgICAgICBjb25zdCBhUmVzb3VyY2U6IGFwaWd3LlJlc291cmNlID0gYXBpUm9vdC5hZGRSZXNvdXJjZSgnYScpO1xuICAgICAgICBhUmVzb3VyY2UuYWRkTWV0aG9kKFxuICAgICAgICAgICAgJ1BPU1QnLFxuICAgICAgICAgICAgbmV3IGFwaWd3LkxhbWJkYUludGVncmF0aW9uKGFMYW1iZGEsIHtcbiAgICAgICAgICAgICAgICBwcm94eTogdHJ1ZSxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IGJSZXNvdXJjZTogYXBpZ3cuUmVzb3VyY2UgPSBhcGlSb290LmFkZFJlc291cmNlKCdiJyk7XG4gICAgICAgIGJSZXNvdXJjZS5hZGRNZXRob2QoXG4gICAgICAgICAgICAnUE9TVCcsXG4gICAgICAgICAgICBuZXcgYXBpZ3cuTGFtYmRhSW50ZWdyYXRpb24oYkxhbWJkYSwge1xuICAgICAgICAgICAgICAgIHByb3h5OiB0cnVlLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcblxuICAgICAgICAvLyBkeW5hbW9kYlxuICAgICAgICBuZXcgZHluYW1vZGIuVGFibGUodGhpcywgJ1RhYmxlJywge1xuICAgICAgICAgICAgcGFydGl0aW9uS2V5OiB7bmFtZTogJ3VzZXJuYW1lJywgdHlwZTogZHluYW1vZGIuQXR0cmlidXRlVHlwZS5TVFJJTkd9LFxuICAgICAgICAgICAgYmlsbGluZ01vZGU6IGR5bmFtb2RiLkJpbGxpbmdNb2RlLlBBWV9QRVJfUkVRVUVTVCxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIl19